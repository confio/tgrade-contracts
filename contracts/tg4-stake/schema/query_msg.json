{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "QueryMsg",
  "anyOf": [
    {
      "description": "Claims shows the tokens in process of unbonding for this address",
      "type": "object",
      "required": [
        "claims"
      ],
      "properties": {
        "claims": {
          "type": "object",
          "required": [
            "address"
          ],
          "properties": {
            "address": {
              "type": "string"
            },
            "limit": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint32",
              "minimum": 0.0
            },
            "start_after": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Expiration"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "staked"
      ],
      "properties": {
        "staked": {
          "type": "object",
          "required": [
            "address"
          ],
          "properties": {
            "address": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "unbonding_period"
      ],
      "properties": {
        "unbonding_period": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Return AdminResponse",
      "type": "object",
      "required": [
        "admin"
      ],
      "properties": {
        "admin": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Return TotalWeightResponse",
      "type": "object",
      "required": [
        "total_weight"
      ],
      "properties": {
        "total_weight": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Returns MemberListResponse",
      "type": "object",
      "required": [
        "list_members"
      ],
      "properties": {
        "list_members": {
          "type": "object",
          "properties": {
            "limit": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint32",
              "minimum": 0.0
            },
            "start_after": {
              "type": [
                "string",
                "null"
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Returns MemberListResponse, sorted by weight descending.",
      "type": "object",
      "required": [
        "list_members_by_weight"
      ],
      "properties": {
        "list_members_by_weight": {
          "type": "object",
          "properties": {
            "limit": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint32",
              "minimum": 0.0
            },
            "start_after": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Member"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Returns MemberResponse",
      "type": "object",
      "required": [
        "member"
      ],
      "properties": {
        "member": {
          "type": "object",
          "required": [
            "addr"
          ],
          "properties": {
            "addr": {
              "type": "string"
            },
            "at_height": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Shows all registered hooks. Returns HooksResponse.",
      "type": "object",
      "required": [
        "hooks"
      ],
      "properties": {
        "hooks": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Return the current number of preauths. Returns PreauthResponse.",
      "type": "object",
      "required": [
        "preauths"
      ],
      "properties": {
        "preauths": {
          "type": "object"
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Expiration": {
      "$ref": "#/definitions/Timestamp"
    },
    "Member": {
      "description": "A group member has a weight associated with them. This may all be equal, or may have meaning in the app that makes use of the group (eg. voting power)",
      "type": "object",
      "required": [
        "addr",
        "weight"
      ],
      "properties": {
        "addr": {
          "type": "string"
        },
        "weight": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "Timestamp": {
      "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
      "allOf": [
        {
          "$ref": "#/definitions/Uint64"
        }
      ]
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
