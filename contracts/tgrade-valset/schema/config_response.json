{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ConfigResponse",
  "type": "object",
  "required": [
    "max_validators",
    "membership",
    "min_weight"
  ],
  "properties": {
    "max_validators": {
      "description": "The maximum number of validators that can be included in the Tendermint validator set. If there are more validators than slots, we select the top N by membership weight descending. (In case of ties at the last slot, select by \"first\" tendermint pubkey lexicographically sorted).",
      "type": "integer",
      "format": "uint32",
      "minimum": 0.0
    },
    "membership": {
      "description": "address of a tg4 contract with the raw membership used to feed the validator set",
      "allOf": [
        {
          "$ref": "#/definitions/Tg4Contract"
        }
      ]
    },
    "min_weight": {
      "description": "minimum weight needed by an address in `membership` to be considered for the validator set. 0-weight members are always filtered out. TODO: if we allow sub-1 scaling factors, determine if this is pre-/post- scaling (use weight for tg4, power for tendermint)",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "scaling": {
      "description": "A scaling factor to multiply tg4-group weights to produce the tendermint validator power (TODO: should we allow this to reduce weight? Like 1/1000?)",
      "type": [
        "integer",
        "null"
      ],
      "format": "uint32",
      "minimum": 0.0
    }
  },
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Tg4Contract": {
      "description": "Tg4Contract is a wrapper around Addr that provides a lot of helpers for working with tg4 contracts",
      "allOf": [
        {
          "$ref": "#/definitions/Addr"
        }
      ]
    }
  }
}
