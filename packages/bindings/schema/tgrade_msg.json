{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "TgradeMsg",
  "description": "A number of Custom messages that can be returned by 'privileged' contracts. Returning them from any other contract will return an error and abort the transaction.",
  "anyOf": [
    {
      "description": "un/register for begin or end block hooks",
      "type": "object",
      "required": [
        "hooks"
      ],
      "properties": {
        "hooks": {
          "$ref": "#/definitions/HooksMsg"
        }
      }
    },
    {
      "description": "privileged contracts can mint arbitrary native tokens (extends BankMsg)",
      "type": "object",
      "required": [
        "mint_tokens"
      ],
      "properties": {
        "mint_tokens": {
          "type": "object",
          "required": [
            "amount",
            "denom",
            "recipient"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            },
            "recipient": {
              "$ref": "#/definitions/HumanAddr"
            }
          }
        }
      }
    },
    {
      "description": "as well as adjust tendermint consensus params",
      "type": "object",
      "required": [
        "consensus_params"
      ],
      "properties": {
        "consensus_params": {
          "$ref": "#/definitions/ConsensusParams"
        }
      }
    },
    {
      "description": "Run another contract in \"sudo\" mode (extends WasmMsg)",
      "type": "object",
      "required": [
        "wasm_sudo"
      ],
      "properties": {
        "wasm_sudo": {
          "type": "object",
          "required": [
            "contract_addr",
            "msg"
          ],
          "properties": {
            "contract_addr": {
              "type": "string"
            },
            "msg": {
              "description": "msg is the json-encoded SudoMsg struct (as raw Binary). Note the contract may support different variants than the base TgradeSudoMsg, which defines the base chain->contract interface",
              "allOf": [
                {
                  "$ref": "#/definitions/Binary"
                }
              ]
            }
          }
        }
      }
    },
    {
      "description": "This will execute an approved proposal in the Cosmos SDK \"Gov Router\". That allows access to many of the system internals, like sdk params or x/upgrade, as well as privileged access to the wasm module (eg. mark module privileged)",
      "type": "object",
      "required": [
        "execute_gov_proposal"
      ],
      "properties": {
        "execute_gov_proposal": {
          "type": "object",
          "required": [
            "description",
            "proposal",
            "title"
          ],
          "properties": {
            "description": {
              "type": "string"
            },
            "proposal": {
              "$ref": "#/definitions/GovProposal"
            },
            "title": {
              "type": "string"
            }
          }
        }
      }
    }
  ],
  "definitions": {
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "BlockParams": {
      "type": "object",
      "properties": {
        "max_bytes": {
          "description": "Maximum number of bytes (over all tx) to be included in a block",
          "type": [
            "integer",
            "null"
          ],
          "format": "int64"
        },
        "max_gas": {
          "description": "Maximum gas (over all tx) to be executed in one block. If set, more txs may be included in a block, but when executing, all tx after this is limit are consumed will immediately error",
          "type": [
            "integer",
            "null"
          ],
          "format": "int64"
        }
      }
    },
    "ConsensusParams": {
      "description": "See https://github.com/tendermint/tendermint/blob/v0.34.8/proto/tendermint/abci/types.proto#L282-L289 These are various Tendermint Consensus Params that can be adjusted by EndBlockers If any of them are set to Some, then the blockchain will set those as new parameter for tendermint consensus.\n\nNote: we are not including ValidatorParams, which is used to change the allowed pubkey types for validators",
      "type": "object",
      "properties": {
        "block": {
          "anyOf": [
            {
              "$ref": "#/definitions/BlockParams"
            },
            {
              "type": "null"
            }
          ]
        },
        "evidence": {
          "anyOf": [
            {
              "$ref": "#/definitions/EvidenceParams"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "EvidenceParams": {
      "type": "object",
      "properties": {
        "max_age_duration": {
          "description": "Max age of evidence, in seconds. It should correspond with an app's \"unbonding period\"",
          "type": [
            "integer",
            "null"
          ],
          "format": "int64"
        },
        "max_age_num_blocks": {
          "description": "Max age of evidence, in blocks.",
          "type": [
            "integer",
            "null"
          ],
          "format": "int64"
        },
        "max_bytes": {
          "description": "Maximum number of bytes of evidence to be included in a block",
          "type": [
            "integer",
            "null"
          ],
          "format": "int64"
        }
      }
    },
    "GovProposal": {
      "anyOf": [
        {
          "description": "Signaling proposal, the text and description field will be recorded",
          "type": "object",
          "required": [
            "text"
          ],
          "properties": {
            "text": {
              "type": "object"
            }
          }
        },
        {
          "description": "Register an \"live upgrade\" on the x/upgrade module See https://github.com/cosmos/cosmos-sdk/blob/v0.42.3/proto/cosmos/upgrade/v1beta1/upgrade.proto#L12-L53",
          "type": "object",
          "required": [
            "register_upgrade"
          ],
          "properties": {
            "register_upgrade": {
              "type": "object",
              "required": [
                "height",
                "info",
                "name",
                "upgraded_client_state"
              ],
              "properties": {
                "height": {
                  "description": "The height at which the upgrade must be performed. (Time-based upgrades are not supported due to instability)",
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                },
                "info": {
                  "description": "Any application specific upgrade info to be included on-chain such as a git commit that validators could automatically upgrade to",
                  "type": "string"
                },
                "name": {
                  "description": "Sets the name for the upgrade. This name will be used by the upgraded version of the software to apply any special \"on-upgrade\" commands during the first BeginBlock method after the upgrade is applied.",
                  "type": "string"
                },
                "upgraded_client_state": {
                  "$ref": "#/definitions/ProtoAny"
                }
              }
            }
          }
        },
        {
          "description": "Defines a proposal to change one or more parameters. See https://github.com/cosmos/cosmos-sdk/blob/v0.42.3/proto/cosmos/params/v1beta1/params.proto#L9-L27",
          "type": "object",
          "required": [
            "change_params"
          ],
          "properties": {
            "change_params": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ParamChange"
              }
            }
          }
        },
        {
          "description": "Allows raw bytes (if client and wasmd are aware of something the contract is not) Like CosmosMsg::Stargate but for the governance router, not normal router",
          "type": "object",
          "required": [
            "raw_proto_proposal"
          ],
          "properties": {
            "raw_proto_proposal": {
              "$ref": "#/definitions/ProtoAny"
            }
          }
        },
        {
          "description": "Updates the matching client to set a new trusted header. This can be used by governance to restore a client that has timed out or forked or otherwise broken. See https://github.com/cosmos/cosmos-sdk/blob/v0.42.3/proto/ibc/core/client/v1/client.proto#L36-L49",
          "type": "object",
          "required": [
            "ibc_client_update"
          ],
          "properties": {
            "ibc_client_update": {
              "type": "object",
              "required": [
                "client_id",
                "header"
              ],
              "properties": {
                "client_id": {
                  "type": "string"
                },
                "header": {
                  "$ref": "#/definitions/ProtoAny"
                }
              }
            }
          }
        }
      ]
    },
    "HooksMsg": {
      "anyOf": [
        {
          "type": "object",
          "required": [
            "register_begin_block"
          ],
          "properties": {
            "register_begin_block": {
              "type": "object"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "unregister_begin_block"
          ],
          "properties": {
            "unregister_begin_block": {
              "type": "object"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "register_end_block"
          ],
          "properties": {
            "register_end_block": {
              "type": "object"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "unregister_end_block"
          ],
          "properties": {
            "unregister_end_block": {
              "type": "object"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "register_validator_set_update"
          ],
          "properties": {
            "register_validator_set_update": {
              "type": "object"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "unregister_validator_set_update"
          ],
          "properties": {
            "unregister_validator_set_update": {
              "type": "object"
            }
          }
        }
      ]
    },
    "HumanAddr": {
      "type": "string"
    },
    "ParamChange": {
      "description": "ParamChange defines an individual parameter change, for use in ParameterChangeProposal.",
      "type": "object",
      "required": [
        "key",
        "subspace",
        "value"
      ],
      "properties": {
        "key": {
          "type": "string"
        },
        "subspace": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "ProtoAny": {
      "type": "object",
      "required": [
        "type_url",
        "value"
      ],
      "properties": {
        "type_url": {
          "type": "string"
        },
        "value": {
          "$ref": "#/definitions/Binary"
        }
      }
    },
    "Uint128": {
      "type": "string"
    }
  }
}
